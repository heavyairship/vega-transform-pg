import{inherits as t,ingest as n,Transform as r}from"vega";var e=require("querystring"),o=require("http");function s(t){r.call(this,[],t)}s.setHttpOptions=function(t){return t?(this._httpOptions=t,this):this._httpOptions},s.setPostgresConnectionString=function(t){return t?(this._postgresConnectionString=t,this):this._postgresConnectionString},s.Definition={type:"postgres",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0}]},t(s,r).transform=function(t,r){try{var i=this;if(!s._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!s._postgresConnectionString)throw Error("Vega Transform Postgres postgres connection string missing. Assign it with setPostgresConnectionString.");return Promise.resolve(new Promise(function(n,r){var i=e.stringify({query:t.query,postgresConnectionString:s._postgresConnectionString});s._httpOptions["Content-Length"]=Buffer.byteLength(i);var g=o.request(s._httpOptions,function(t){var e="";t.on("data",function(t){e+=t}),t.on("end",function(){400===t.statusCode?r(t.statusMessage+": "+e):n(JSON.parse(e).rows)})});g.on("error",function(t){r(t)}),g.write(i),g.end()}).catch(function(t){return console.log(t),[]})).then(function(t){t.forEach(n);var e=r.fork(r.NO_FIELDS&r.NO_SOURCE);return e.rem=i.value,i.value=e.add=e.source=t,e})}catch(t){return Promise.reject(t)}};export default s;
//# sourceMappingURL=vega-transform-pg.mjs.map
