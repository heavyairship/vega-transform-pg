import{inherits as t,ingest as r,Transform as e}from"vega";var n=require("querystring"),i=require("http");function s(t){e.call(this,[],t)}s.setHttpOptions=function(t){return t?(this._httpOptions=t,this):this._httpOptions},s.setPostgresConnectionString=function(t){return t?(this._postgresConnectionString=t,this):this._postgresConnectionString},s.Definition={type:"postgres",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0},{name:"field",type:"string",required:!1},{name:"table",type:"string",required:!1},{name:"max_bins",type:"number",required:!1}]},t(s,e).transform=function(t,e){try{var o=this;if(!s._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!s._postgresConnectionString)throw Error("Vega Transform Postgres postgres connection string missing. Assign it with setPostgresConnectionString.");if("bin"===t.query){if("string"!=typeof t.field)throw Error("Vega Transform Postgres bin query requires field param");if("string"!=typeof t.table)throw Error("Vega Transform Postgres bin query requires table param");if("number"!=typeof t.max_bins)throw Error("Vega Transform Postgres bin query requires max_bins param")}return Promise.resolve(new Promise(function(r,e){var o=n.stringify({query:t.query,field:t.field,table:t.table,max_bins:t.max_bins,postgresConnectionString:s._postgresConnectionString});s._httpOptions["Content-Length"]=Buffer.byteLength(o);var a=i.request(s._httpOptions,function(t){var n="";t.on("data",function(t){n+=t}),t.on("end",function(){400===t.statusCode?e(t.statusMessage+": "+n):r(JSON.parse(n).rows)})});a.on("error",function(t){e(t)}),a.write(o),a.end()}).catch(function(t){return console.log(t),[]})).then(function(t){t.forEach(r);var n=e.fork(e.NO_FIELDS&e.NO_SOURCE);return n.rem=o.value,o.value=n.add=n.source=t,n})}catch(t){return Promise.reject(t)}};export default s;
//# sourceMappingURL=vega-transform-pg.mjs.map
