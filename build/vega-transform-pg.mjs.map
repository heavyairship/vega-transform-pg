{"version":3,"file":"vega-transform-pg.mjs","sources":["../index.js"],"sourcesContent":["import { inherits, ingest, Transform } from \"vega\";\nconst querystring = require('querystring');\nconst http = require('http');\n\n/**\n * Generates a function to query data from an Postgres database.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.query - The SQL query.\n */\nexport default function VegaTransformPostgres(params) {\n  Transform.call(this, [], params);\n}\n\nVegaTransformPostgres.setHttpOptions = function(httpOptions) {\n  if(httpOptions) {\n    this._httpOptions = httpOptions;\n    return this;\n  }\n  return this._httpOptions;\n}\n\nVegaTransformPostgres.setPostgresConnectionString = function(postgresConnectionString) {\n  if(postgresConnectionString) {\n    this._postgresConnectionString = postgresConnectionString;\n    return this;\n  }\n  return this._postgresConnectionString;\n}\n\nVegaTransformPostgres.Definition = {\n  type: \"postgres\",\n  metadata: { changes: true, source: true },\n  params: [\n    { name: \"query\", type: \"string\", required: true },\n    { name: \"field\", type: \"string\", required: false },\n    { name: \"table\", type: \"string\", required: false },\n    { name: \"max_bins\", type: \"number\", required: false }\n  ]\n};\n\nconst prototype = inherits(VegaTransformPostgres, Transform);\n\nprototype.transform = async function(_, pulse) {\n  if(!VegaTransformPostgres._httpOptions) {\n    throw Error(\"Vega Transform Postgres http options missing. Assign it with setHttpOptions.\");\n  }\n  if(!VegaTransformPostgres._postgresConnectionString) {\n    throw Error(\"Vega Transform Postgres postgres connection string missing. Assign it with setPostgresConnectionString.\");\n  }\n  if(_.query === \"bin\") {\n    if(typeof _.field !== \"string\") {\n      throw Error(\"Vega Transform Postgres bin query requires field param\")\n    }\n    if(typeof _.table !== \"string\") {\n      throw Error(\"Vega Transform Postgres bin query requires table param\")\n    }\n    if(typeof _.max_bins !== \"number\") {\n      throw Error(\"Vega Transform Postgres bin query requires max_bins param\")\n    }\n  }\n  const result = await new Promise((resolve, reject) => {\n    const postData = querystring.stringify({\n      query: _.query,\n      field: _.field,\n      table: _.table,\n      max_bins: _.max_bins,\n      postgresConnectionString: VegaTransformPostgres._postgresConnectionString\n    });\n    VegaTransformPostgres._httpOptions['Content-Length'] = Buffer.byteLength(postData);\n    const req = http.request(VegaTransformPostgres._httpOptions, res => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        if(res.statusCode === 400) {\n          reject(`${res.statusMessage}: ${data}`);\n        } else {\n          resolve(JSON.parse(data).rows);\n        }\n      });\n    });\n    req.on('error', err => {\n      reject(err);\n    });\n    req.write(postData);\n    req.end();\n  }).catch(err => {\n    console.log(err);\n    return [];\n  });\n  result.forEach(ingest);\n  const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = this.value;\n  this.value = out.add = out.source = result;\n  return out;\n}\n"],"names":["const","querystring","require","http","VegaTransformPostgres","params","Transform","call","this","setHttpOptions","httpOptions","_httpOptions","setPostgresConnectionString","postgresConnectionString","_postgresConnectionString","Definition","type","metadata","changes","source","name","required","inherits","transform","_","pulse","Error","query","field","table","max_bins","Promise","resolve","reject","postData","stringify","Buffer","byteLength","req","request","res","data","on","chunk","statusCode","JSON","parse","rows","err","write","end","catch","console","log","result","forEach","ingest","out","fork","NO_FIELDS","NO_SOURCE","rem","_this","value","add"],"mappings":"2DACAA,IAAMC,EAAcC,QAAQ,eACtBC,EAAOD,QAAQ,QAQN,SAASE,EAAsBC,GAC5CC,EAAUC,KAAKC,KAAM,GAAIH,GAG3BD,EAAsBK,eAAiB,SAASC,UAC3CA,QACIC,aAAeD,EACbF,MAEFA,KAAKG,cAGdP,EAAsBQ,4BAA8B,SAASC,UACxDA,QACIC,0BAA4BD,EAC1BL,MAEFA,KAAKM,2BAGdV,EAAsBW,WAAa,CACjCC,KAAM,WACNC,SAAU,CAAEC,SAAS,EAAMC,QAAQ,GACnCd,OAAQ,CACN,CAAEe,KAAM,QAASJ,KAAM,SAAUK,UAAU,GAC3C,CAAED,KAAM,QAASJ,KAAM,SAAUK,UAAU,GAC3C,CAAED,KAAM,QAASJ,KAAM,SAAUK,UAAU,GAC3C,CAAED,KAAM,WAAYJ,KAAM,SAAUK,UAAU,KAIhCC,EAASlB,EAAuBE,GAExCiB,mBAA2BC,EAAGC,aAmD5BjB,SAlDNJ,EAAsBO,mBAClBe,MAAM,oFAEVtB,EAAsBU,gCAClBY,MAAM,8GAEC,QAAZF,EAAEG,MAAiB,IACE,iBAAZH,EAAEI,YACJF,MAAM,6DAEQ,iBAAZF,EAAEK,YACJH,MAAM,6DAEW,iBAAfF,EAAEM,eACJJ,MAAM,oFAGK,IAAIK,iBAASC,EAASC,OACnCC,EAAWjC,EAAYkC,UAAU,CACrCR,MAAOH,EAAEG,MACTC,MAAOJ,EAAEI,MACTC,MAAOL,EAAEK,MACTC,SAAUN,EAAEM,SACZjB,yBAA0BT,EAAsBU,4BAElDV,EAAsBO,aAAa,kBAAoByB,OAAOC,WAAWH,OACnEI,EAAMnC,EAAKoC,QAAQnC,EAAsBO,sBAAc6B,OACvDC,EAAO,GACXD,EAAIE,GAAG,gBAASC,GACdF,GAAQE,IAEVH,EAAIE,GAAG,iBACiB,MAAnBF,EAAII,WACLX,EAAUO,qBAAsBC,GAEhCT,EAAQa,KAAKC,MAAML,GAAMM,UAI/BT,EAAII,GAAG,iBAASM,GACdf,EAAOe,KAETV,EAAIW,MAAMf,GACVI,EAAIY,QACHC,eAAMH,UACPI,QAAQC,IAAIL,GACL,oBA7BHM,GA+BNA,EAAOC,QAAQC,OACTC,EAAMhC,EAAMiC,KAAKjC,EAAMkC,UAAYlC,EAAMmC,kBAC/CH,EAAII,IAAMC,EAAKC,QACVA,MAAQN,EAAIO,IAAMP,EAAItC,OAASmC,EAC7BG"}