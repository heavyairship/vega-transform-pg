{"version":3,"file":"vega-transform-pg.mjs","sources":["../index.js"],"sourcesContent":["import { inherits, ingest, Transform } from \"vega\";\nconst querystring = require('querystring');\nconst http = require('http');\n\n/**\n * Generates a function to query data from an Postgres database.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.query - The SQL query.\n */\nexport default function VegaTransformPostgres(params) {\n  Transform.call(this, [], params);\n}\n\nVegaTransformPostgres.Definition = {\n  type: \"VegaTransformPostgres\",\n  metadata: { changes: true, source: true },\n  params: [{ name: \"query\", type: \"string\", required: true }]\n};\n\nVegaTransformPostgres.setQuery = function(query) {\n  this.query = query;\n}\n\nconst prototype = inherits(VegaTransformPostgres, Transform);\n\nprototype.transform = async function(_, pulse) {\n  return new Promise((resolve, reject) => {\n    const postData = querystring.stringify({\n      'query': this.query\n    });\n    const options = {\n      hostname: 'localhost',\n      port: 3000,\n      method: 'POST',\n      path: '/query',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': Buffer.byteLength(postData)\n      }\n    }\n    const req = http.request(options, res => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        console.log(JSON.parse(data).rows);\n        resolve(data);\n      });\n    });\n    req.on('error', err => {\n      console.error(`Error: ${err}`);\n      reject();\n    });\n    req.write(postData);\n    req.end();\n  });\n}\n"],"names":["const","querystring","require","http","VegaTransformPostgres","params","Transform","call","this","Definition","type","metadata","changes","source","name","required","setQuery","query","inherits","transform","_","pulse","Promise","resolve","reject","postData","stringify","_this","options","hostname","port","method","path","headers","Buffer","byteLength","req","request","res","data","on","chunk","console","log","JSON","parse","rows","err","error","write","end"],"mappings":"+CACAA,IAAMC,EAAcC,QAAQ,eACtBC,EAAOD,QAAQ,QAQN,SAASE,EAAsBC,GAC5CC,EAAUC,KAAKC,KAAM,GAAIH,GAG3BD,EAAsBK,WAAa,CACjCC,KAAM,wBACNC,SAAU,CAAEC,SAAS,EAAMC,QAAQ,GACnCR,OAAQ,CAAC,CAAES,KAAM,QAASJ,KAAM,SAAUK,UAAU,KAGtDX,EAAsBY,SAAW,SAASC,QACnCA,MAAQA,GAGGC,EAASd,EAAuBE,GAExCa,mBAA2BC,EAAGC,aAGzBb,4BAFN,IAAIc,iBAASC,EAASC,OACrBC,EAAWxB,EAAYyB,UAAU,OAC5BC,EAAKV,QAEVW,EAAU,CACdC,SAAU,YACVC,KAAM,IACNC,OAAQ,OACRC,KAAM,SACNC,QAAS,gBACS,qDACEC,OAAOC,WAAWV,KAGlCW,EAAMjC,EAAKkC,QAAQT,WAASU,OAC5BC,EAAO,GACXD,EAAIE,GAAG,gBAASC,GACdF,GAAQE,IAEVH,EAAIE,GAAG,iBACLE,QAAQC,IAAIC,KAAKC,MAAMN,GAAMO,MAC7BvB,EAAQgB,OAGZH,EAAII,GAAG,iBAASO,GACdL,QAAQM,gBAAgBD,GACxBvB,MAEFY,EAAIa,MAAMxB,GACVW,EAAIc"}