!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("vega")):"function"==typeof define&&define.amd?define(["vega"],e):t.VegaTransformPostgres=e(t.vega)}(this,function(t){var e=require("querystring"),r=require("http");function n(e){t.Transform.call(this,[],e)}return n.setHttpOptions=function(t){return t?(this._httpOptions=t,this):this._httpOptions},n.setPostgresConnectionString=function(t){return t?(this._postgresConnectionString=t,this):this._postgresConnectionString},n.Definition={type:"postgres",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0},{name:"field",type:"string",required:!1},{name:"table",type:"string",required:!1},{name:"max_bins",type:"number",required:!1}]},t.inherits(n,t.Transform).transform=function(i,s){try{var o=this;if(!n._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!n._postgresConnectionString)throw Error("Vega Transform Postgres postgres connection string missing. Assign it with setPostgresConnectionString.");if("bin"===i.query){if("string"!=typeof i.field)throw Error("Vega Transform Postgres bin query requires field param");if("string"!=typeof i.table)throw Error("Vega Transform Postgres bin query requires table param");if("number"!=typeof i.max_bins)throw Error("Vega Transform Postgres bin query requires max_bins param")}return Promise.resolve(new Promise(function(t,s){var o=e.stringify({query:i.query,field:i.field,table:i.table,max_bins:i.max_bins,postgresConnectionString:n._postgresConnectionString});n._httpOptions["Content-Length"]=Buffer.byteLength(o);var a=r.request(n._httpOptions,function(e){var r="";e.on("data",function(t){r+=t}),e.on("end",function(){400===e.statusCode?s(e.statusMessage+": "+r):t(JSON.parse(r).rows)})});a.on("error",function(t){s(t)}),a.write(o),a.end()}).catch(function(t){return console.log(t),[]})).then(function(e){e.forEach(t.ingest);var r=s.fork(s.NO_FIELDS&s.NO_SOURCE);return r.rem=o.value,o.value=r.add=r.source=e,r})}catch(t){return Promise.reject(t)}},n});
//# sourceMappingURL=vega-transform-pg.umd.js.map
