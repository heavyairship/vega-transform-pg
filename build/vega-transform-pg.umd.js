!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n(require("vega")):"function"==typeof define&&define.amd?define(["vega"],n):t.VegaTransformPostgres=n(t.vega)}(this,function(t){var n=require("querystring"),e=require("http");function r(n){t.Transform.call(this,[],n)}return r.setHttpOptions=function(t){return t?(this._httpOptions=t,this):this._httpOptions},r.setPostgresConnectionString=function(t){return t?(this._postgresConnectionString=t,this):this._postgresConnectionString},r.Definition={type:"postgres",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0}]},t.inherits(r,t.Transform).transform=function(o,s){try{var i=this;if(!r._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!r._postgresConnectionString)throw Error("Vega Transform Postgres postgres connection string missing. Assign it with setPostgresConnectionString.");return Promise.resolve(new Promise(function(t,s){var i=n.stringify({query:o.query,postgresConnectionString:r._postgresConnectionString});r._httpOptions["Content-Length"]=Buffer.byteLength(i);var u=e.request(r._httpOptions,function(n){var e="";n.on("data",function(t){e+=t}),n.on("end",function(){400===n.statusCode?s(n.statusMessage+": "+e):t(JSON.parse(e).rows)})});u.on("error",function(t){s(t)}),u.write(i),u.end()}).catch(function(t){return console.log(t),[]})).then(function(n){n.forEach(t.ingest);var e=s.fork(s.NO_FIELDS&s.NO_SOURCE);return e.rem=i.value,i.value=e.add=e.source=n,e})}catch(t){return Promise.reject(t)}},r});
//# sourceMappingURL=vega-transform-pg.umd.js.map
