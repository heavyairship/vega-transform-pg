var t=require("vega"),n=require("querystring"),r=require("http");function e(n){t.Transform.call(this,[],n)}e.setHttpOptions=function(t){return t?(this._httpOptions=t,this):this._httpOptions},e.setPostgresConnectionString=function(t){return t?(this._postgresConnectionString=t,this):this._postgresConnectionString},e.Definition={type:"postgres",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0}]},t.inherits(e,t.Transform).transform=function(s,o){try{var i=this;if(!e._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!e._postgresConnectionString)throw Error("Vega Transform Postgres postgres connection string missing. Assign it with setPostgresConnectionString.");return Promise.resolve(new Promise(function(t,o){var i=n.stringify({query:s.query,postgresConnectionString:e._postgresConnectionString});e._httpOptions["Content-Length"]=Buffer.byteLength(i);var g=r.request(e._httpOptions,function(n){var r="";n.on("data",function(t){r+=t}),n.on("end",function(){400===n.statusCode?o(n.statusMessage+": "+r):t(JSON.parse(r).rows)})});g.on("error",function(t){o(t)}),g.write(i),g.end()}).catch(function(t){return console.log(t),[]})).then(function(n){n.forEach(t.ingest);var r=o.fork(o.NO_FIELDS&o.NO_SOURCE);return r.rem=i.value,i.value=r.add=r.source=n,r})}catch(t){return Promise.reject(t)}},module.exports=e;
//# sourceMappingURL=vega-transform-pg.js.map
