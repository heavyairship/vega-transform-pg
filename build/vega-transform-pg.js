var r=require("vega"),t=require("querystring"),e=require("http");function n(t){r.Transform.call(this,[],t)}n.setHttpOptions=function(r){return r?(this._httpOptions=r,this):this._httpOptions},n.setPostgresConnectionString=function(r){return r?(this._postgresConnectionString=r,this):this._postgresConnectionString},n.Definition={type:"postgres",metadata:{changes:!0,source:!0},params:[{name:"query",type:"string",required:!0},{name:"field",type:"string",required:!1},{name:"table",type:"string",required:!1},{name:"max_bins",type:"number",required:!1}]},r.inherits(n,r.Transform).transform=function(i,s){try{var o=this;if(!n._httpOptions)throw Error("Vega Transform Postgres http options missing. Assign it with setHttpOptions.");if(!n._postgresConnectionString)throw Error("Vega Transform Postgres postgres connection string missing. Assign it with setPostgresConnectionString.");if("bin"===i.query){if("string"!=typeof i.field)throw Error("Vega Transform Postgres bin query requires field param");if("string"!=typeof i.table)throw Error("Vega Transform Postgres bin query requires table param");if("number"!=typeof i.max_bins)throw Error("Vega Transform Postgres bin query requires max_bins param")}return Promise.resolve(new Promise(function(r,s){var o=t.stringify({query:i.query,field:i.field,table:i.table,max_bins:i.max_bins,postgresConnectionString:n._postgresConnectionString});n._httpOptions["Content-Length"]=Buffer.byteLength(o);var a=e.request(n._httpOptions,function(t){var e="";t.on("data",function(r){e+=r}),t.on("end",function(){400===t.statusCode?s(t.statusMessage+": "+e):r(JSON.parse(e).rows)})});a.on("error",function(r){s(r)}),a.write(o),a.end()}).catch(function(r){return console.log(r),[]})).then(function(t){t.forEach(r.ingest);var e=s.fork(s.NO_FIELDS&s.NO_SOURCE);return e.rem=o.value,o.value=e.add=e.source=t,e})}catch(r){return Promise.reject(r)}},module.exports=n;
//# sourceMappingURL=vega-transform-pg.js.map
