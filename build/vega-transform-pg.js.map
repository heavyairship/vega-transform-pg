{"version":3,"file":"vega-transform-pg.js","sources":["../index.js"],"sourcesContent":["import { inherits, ingest, Transform } from \"vega\";\nconst querystring = require('querystring');\nconst http = require('http');\n\n/**\n * Generates a function to query data from an Postgres database.\n * @constructor\n * @param {object} params - The parameters for this operator.\n * @param {function(object): *} params.query - The SQL query.\n */\nexport default function VegaTransformPostgres(params) {\n  Transform.call(this, [], params);\n}\n\nVegaTransformPostgres.setHttpOptions = function(options) {\n  if(options) {\n    this._options = options;\n    return this;\n  }\n  return this._options;\n}\n\nVegaTransformPostgres.Definition = {\n  type: \"postgres\",\n  metadata: { changes: true, source: true },\n  params: [{ name: \"query\", type: \"string\", required: true }]\n};\n\nconst prototype = inherits(VegaTransformPostgres, Transform);\n\nprototype.transform = async function(_, pulse) {\n  if(!VegaTransformPostgres._options) {\n    throw Error(\"Vega Transform Postgres query missing. Assign it with setQuery.\");\n  }\n  const result = await new Promise((resolve, reject) => {\n    console.log(_.query);\n    const postData = querystring.stringify({'query': _.query});\n    VegaTransformPostgres._options['Content-Length'] = Buffer.byteLength(postData)\n    const req = http.request(VegaTransformPostgres._options, res => {\n      let data = '';\n      res.on('data', (chunk) => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        resolve(JSON.parse(data).rows);\n      });\n    });\n    req.on('error', err => {\n      console.error(`Error: ${err}`);\n      reject();\n    });\n    req.write(postData);\n    req.end();\n  });\n  console.log(result);\n  result.forEach(ingest);\n  const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n  out.rem = this.value;\n  this.value = out.add = out.source = result;\n  return out;\n}\n"],"names":["querystring","require","http","VegaTransformPostgres","params","Transform","call","this","setHttpOptions","options","_options","Definition","type","metadata","changes","source","name","required","inherits","transform","_","pulse","Error","Promise","resolve","reject","console","log","query","postData","stringify","Buffer","byteLength","req","request","res","data","on","chunk","JSON","parse","rows","err","error","write","end","result","forEach","ingest","out","fork","NO_FIELDS","NO_SOURCE","rem","_this","value","add"],"mappings":"sBACMA,EAAcC,QAAQ,eACtBC,EAAOD,QAAQ,QAQN,SAASE,EAAsBC,GAC5CC,YAAUC,KAAKC,KAAM,GAAIH,GAG3BD,EAAsBK,eAAiB,SAASC,UAC3CA,QACIC,SAAWD,EACTF,MAEFA,KAAKG,UAGdP,EAAsBQ,WAAa,CACjCC,KAAM,WACNC,SAAU,CAAEC,SAAS,EAAMC,QAAQ,GACnCX,OAAQ,CAAC,CAAEY,KAAM,QAASJ,KAAM,SAAUK,UAAU,KAGpCC,WAASf,EAAuBE,aAExCc,mBAA2BC,EAAGC,aA2B5Bd,SA1BNJ,EAAsBO,eAClBY,MAAM,0FAEO,IAAIC,iBAASC,EAASC,GACzCC,QAAQC,IAAIP,EAAEQ,WACRC,EAAW7B,EAAY8B,UAAU,OAAUV,EAAEQ,QACnDzB,EAAsBO,SAAS,kBAAoBqB,OAAOC,WAAWH,OAC/DI,EAAM/B,EAAKgC,QAAQ/B,EAAsBO,kBAAUyB,OACnDC,EAAO,GACXD,EAAIE,GAAG,gBAASC,GACdF,GAAQE,IAEVH,EAAIE,GAAG,iBACLb,EAAQe,KAAKC,MAAMJ,GAAMK,UAG7BR,EAAII,GAAG,iBAASK,GACdhB,QAAQiB,gBAAgBD,GACxBjB,MAEFQ,EAAIW,MAAMf,GACVI,EAAIY,uBAlBAC,GAoBNpB,QAAQC,IAAImB,GACZA,EAAOC,QAAQC,cACTC,EAAM5B,EAAM6B,KAAK7B,EAAM8B,UAAY9B,EAAM+B,kBAC/CH,EAAII,IAAMC,EAAKC,QACVA,MAAQN,EAAIO,IAAMP,EAAIlC,OAAS+B,EAC7BG"}